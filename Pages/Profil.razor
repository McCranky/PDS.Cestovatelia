@page "/profil"
@page "/profil/{SearchUserId:int}/{Following:bool}"
@attribute [Authorize]

@inject Data.OracleDbContext Context
@inject Services.AuthService Auth
@inject SessionStorageService Session
@inject NavigationManager Navigation

@if (_userStats != null) {
    <div class="card text-white bg-dark w-50 align-self-center m-3 text-center">
        @if (_user != null) {
            <div class="card-header">@_user.Name @_user.Surname</div>
        } else {
            <div class="card-header">@_currentUser.Name @_currentUser.Surname</div>
        }
        <div class="card-body">
            @if (_user != null) {
                <h5 class="card-title">@_user.Nickname</h5>
            } else { 
                <h5 class="card-title">@_currentUser.Nickname</h5>
            }
            <hr style="background-color: wheat;" />
            <p class="card-text">Total posts: @_userStats.PostsCount</p>
            <p class="card-text profilePointer" @onclick="HandleFollowersOf">Followed by: @_userStats.FollowersCount</p>
            <p class="card-text profilePointer" @onclick="HandleFollowersFor">Following: @_userStats.FollowingCount</p>
            @if (_user != null) {
                if (Following) {
                    <span class="hover-blue" @onclick="HandleUnfollow">Stop following <i class="fas fa-dumpster ml-1"></i></span>
                } else {
                    <span class="hover-blue" @onclick="HandleFollow">Srat following<i class="fas fa-paper-plane ml-1"></i></span>
                }
            }
        </div>
    </div>
} else {
    <p>Loading...</p>
}

@if (_posts != null) {
    @foreach (var post in _posts) {
        <PostCard Post=post User=_currentUser ShowComments=false HandleDeletePost="@(async () => await HandleDeletePost(post))"/>
    }
}

@code {
    [Parameter]
    public int SearchUserId { get; set; } = int.MinValue;
    [Parameter]
    public bool Following { get; set; }

    private UserInfo _currentUser;
    private SearchUserInfo _user;
    private UserStats _userStats;
    private IList<Post> _posts;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await Auth.GetCurrentUser();

        if (SearchUserId != default) {
            _user = await Session.GetSearchUser();
            _posts = await Context.GetAllUsersPostsAsync(_currentUser.Id, (int)_currentUser.Role, _user.Id);
            _userStats = await Context.GetUserStats(_user.Id);
        } else {
            _posts = await Context.GetAllUsersPostsAsync(_currentUser.Id, (int)_currentUser.Role, _currentUser.Id);
            _userStats = await Context.GetUserStats(_currentUser.Id);
        }
    }

    private async Task HandleDeletePost(Post post)
    {
        if (await Context.DeletePostAsync(post.PostId)) {
            _posts.Remove(post);
            StateHasChanged();
        }
    }

    private async Task HandleFollow()
    {
        if (await Context.InsertFollowAsync(_currentUser.Id, SearchUserId)) {
            Following = true;
            ++_userStats.FollowersCount;
        }
    }

    private async Task HandleUnfollow()
    {
        if (await Context.DeleteFollowAsync(_currentUser.Id, SearchUserId)) {
            Following = false;
            --_userStats.FollowersCount;
        }
    }

    private void HandleFollowersOf()
    {
        if (_userStats.FollowersCount == 0) return;
        Navigation.NavigateTo($"/followers/of/{(SearchUserId != default ? SearchUserId : _currentUser.Id)}/{_currentUser.Id}");
    }

    private void HandleFollowersFor()
    {
        if (_userStats.FollowingCount == 0) return;
        Navigation.NavigateTo($"/followers/for/{(SearchUserId != default ? SearchUserId : _currentUser.Id)}/{_currentUser.Id}");
    }
}
